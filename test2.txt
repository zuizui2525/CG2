■ Heap (Default / Upload / Readback)
What : GPUメモリの種類（用途によって3タイプ）。

Why : 転送や実行性能を最適化するため。

When : リソース生成時。

Where : GPUヒープ（メモリ）上。

Who : 開発者が用途に応じて選択。

How : CreateCommittedResource()でヒープ種別を指定して使う。

🍳 料理の例え：
　・UploadHeap → 下ごしらえ中のまな板。CPUから材料（データ）をGPUへ渡す。
　・DefaultHeap → オーブンやコンロ。実際に料理（描画処理）が行われる。
　・ReadbackHeap → 試食用の皿。GPUから戻したデータをCPUで確認。

■ RootParameter
What : ルートシグネチャ内の1つ1つのパラメータ要素。

Why : シェーダーに渡すリソースの種類を区別するため。

When : ルートシグネチャを定義する時。

Where : GPUパイプラインの先頭部分。

Who : 開発者が指定。

How : DescriptorTable, CBV, SRV などを型として指定。

🍳 料理の例え：
　「レシピの中の“材料A: 人参、材料B: 肉”」みたいな感じで、使う素材ごとに種類を明記する部分。

■ RootSignature
What : GPUに渡すリソースの全体的な構成ルール。

Why : 高速なバインディングとパイプラインの最適化のため。

When : Pipeline State Object 作成前。

Where : パイプラインの先頭に一度だけ設定される。

Who : グラフィックスエンジンの設計者。

How : D3D12_ROOT_SIGNATURE_DESCで定義し、シリアライズして使う。

🍳 料理の例え：
　料理のレシピ帳そのもの。「材料はこれとこれで、順番はこう！」とまとめたルールセット。

■ DescriptorTable
What : 複数のリソース（SRV/CBVなど）をまとめたテーブル。

Why : 多数のリソースを効率的に管理するため。

When : RootSignature構築時。

Where : GPUのDescriptorHeapと連携。

Who : 開発者。

How : DescriptorRange[] を使ってテーブルを構成。

🍳 料理の例え：
　お盆の上に「調味料セット」「薬味皿」など複数の材料がまとまって置かれてる感じ。

■ DescriptorRange
What : DescriptorTableの中の1つのまとまり。CBV/SRVなどの範囲。

Why : 同種リソースをまとめて指定するため。

When : RootParameter定義時。

Where : DescriptorTableの内部。

Who : 開発者。

How : D3D12_DESCRIPTOR_RANGE構造体で指定。

🍳 料理の例え：
　「このお盆にはスパイス3種が並んでます」といったように、特定ジャンルの素材セット。

■ Resource（Texture / Buffer）
What : GPU上に配置されるデータのこと（テクスチャ、頂点、定数など）。

Why : シェーダーで使用するためのデータ源。

When : 描画対象の準備が整ったとき。

Where : Heap内（通常はDefaultHeap）。

Who : 描画するすべてのデータを用意する開発者。

How : CreateCommittedResource()などで生成。

🍳 料理の例え：
　「食材」そのもの。肉・野菜・スープなど。調理される前の素材。

■ Texture
What : 画像データや色・法線情報などを格納するリソース。

Why : モデルの見た目や効果を表現するため。

When : 描画オブジェクトごとに使用。

Where : Resourceとして格納。

Who : デザイナーや開発者。

How : DDSなどの形式で読み込み、GPUにUpload。

🍳 料理の例え：
　「料理の見た目に関わるソース・装飾」。ステーキの焼き目や寿司のつやみたいなもの。

■ Buffer
What : テクスチャ以外のデータ（頂点・インデックス・定数など）を格納するリソース。

Why : モデル形状や設定値をシェーダーに渡すため。

When : モデル描画前や更新時。

Where : GPUメモリ上。

Who : モデルを操作する側（CPU）が用意。

How : VertexBuffer, IndexBuffer, ConstantBuffer など種類別に生成。

🍳 料理の例え：
　野菜の切り方（細切り、輪切りなど）に応じて、バラバラの容器に保存されている食材たち。

■ Z-Buffer（Depth Buffer）
What : 奥行き情報を格納する特殊なバッファ。

Why : 物体の前後関係を正しく描画するため。

When : 各フレームの描画時に更新。

Where : GPUの特殊なメモリ領域。

Who : 自動的にシステムが制御（ただし初期化は開発者）。

How : DepthStencilView経由でアクセスされる。

🍳 料理の例え：
　「料理の盛り付け順（奥の料理から手前に）」を決める透明なガイド。手前の料理で奥が隠れないように。

■ VertexBufferView (VBV)
What : 頂点バッファをGPUに渡すためのビュー（構造情報）。

Why : GPUがバッファ内容を正しく解釈するため。

When : 描画直前に IASetVertexBuffers() などで設定。

Where : コマンドリスト内。

Who : 開発者。

How : D3D12_VERTEX_BUFFER_VIEW 構造体で指定。

🍳 料理の例え：
　野菜スライスを「千切り」か「輪切り」か指定する説明書。正しい切り方（構造）を伝える。

■ ShaderResourceView (SRV)
What : テクスチャなど読み取り専用のリソースをGPUに渡すためのビュー。

Why : シェーダーで画像やバッファを読み取るため。

When : パイプライン構築時。

Where : DescriptorHeap上。

Who : 開発者。

How : CreateShaderResourceView() で生成。

🍳 料理の例え：
　料理の参考写真。「この料理はこう見えるべき」と、調理人に視覚情報を提供する。

■ RenderTargetView (RTV)
What : 描画出力先（画面やテクスチャ）を指すビュー。

Why : 描いた結果を保存・表示するため。

When : 描画開始時にバインド。

Where : DescriptorHeap上。

Who : 描画ターゲットを用意する開発者。

How : CreateRenderTargetView() で作成。

🍳 料理の例え：
　盛り付け皿。出来上がった料理を乗せる場所を決める。

■ DepthStencilView (DSV)
What : Z-Bufferやステンシル情報へのアクセスを提供するビュー。

Why : 奥行き・マスク処理を有効化するため。

When : 描画開始時。

Where : コマンドリスト内の設定で。

Who : 開発者。

How : CreateDepthStencilView() を使って作る。

🍳 料理の例え：
　盛り付けの「前後関係ガイド」＋「型抜きテンプレート」。特定の形にだけ盛り付け可能にする。

■ ConstantBufferView (CBV)
What : 小さな定数データ（マトリクス、色など）をシェーダーに渡すためのビュー。

Why : 毎フレーム変わる情報を効率よく渡すため。

When : 各フレーム・描画ごとに更新。

Where : DescriptorHeap上。

Who : CPUからGPUへ設定する開発者。

How : CreateConstantBufferView() を使って作成。

🍳 料理の例え：
　調理手順メモ。「今日はこの順番・この火加減で」と調理人に伝える。

■ CommandList
What : GPUに渡す一連の描画・状態設定コマンドの集まり。

Why : CPUでまとめて準備し、高速にGPUへ渡すため。

When : 毎フレームまたは必要時。

Where : CPU側で準備し、GPUに送る。

Who : 開発者。

How : Begin() → Record() → Close() で構築し、キューに送る。

🍳 料理の例え：
　「この手順通りに調理して！」というレシピの工程指示書。

■ CommandQueue
What : 複数のCommandListをGPUに渡すキュー。

Why : 実行順を管理し、効率的な処理を実現するため。

When : CommandListが準備できたとき。

Where : GPUへの入口。

Who : 開発者が ExecuteCommandLists() で送信。

How : CommandListをキューに追加する。

🍳 料理の例え：
　調理工程の順番待ちリスト。注文票を順番にキッチンに渡していくホールスタッフのような存在。

■ RenderingPipeline
What : 頂点→ラスタライズ→ピクセル処理など、一連の描画処理の流れ。

Why : GPUに「何をどう描くか」を伝える枠組み。

When : 描画時に毎回使われる。

Where : GPU内部で動作。

Who : GPUが実行、開発者が設計。

How : RootSignature, シェーダー, ステート設定などをまとめて構築。

🍳 料理の例え：
　サラダバーの調理ライン。洗う→切る→盛る→ドレッシング…と手順が決まっている。

■ PipelineStateObject（PSO）
What : パイプラインに必要な設定を全部まとめた構造体。

Why : 状態の切替を高速化し、安定化させるため。

When : 描画前に設定。

Where : GPU側にキャッシュされる。

Who : 開発者が CreateGraphicsPipelineState() で作る。

How : RootSignature, シェーダー, Blend/Rasterizer/Depth設定などを詰め込む。

🍳 料理の例え：
　レシピブック1冊。調理順・材料・火加減・盛り方がすべて決まっている。

■ BlendState
What : 描画色と既存の色をどう合成するか決めるステート。

Why : 透明度・光の加算などを制御するため。

When : 半透明物体やエフェクト描画時。

Where : PSOに含まれる。

Who : 開発者。

How : D3D12_BLEND_DESC で指定。

🍳 料理の例え：
　ソースをかけるかどうか、またはタレを混ぜるかそのままにするか。

■ RasterizerState
What : ポリゴンの塗り方やカリング（裏面消去）方法を制御。

Why : 三角形を画面上に投影するため。

When : 描画時に自動適用。

Where : PSOに含まれる。

Who : 開発者。

How : D3D12_RASTERIZER_DESC に設定。

🍳 料理の例え：
　おにぎりの包み方。のりで巻くか、内側に具材を隠すか（表／裏面を使うか）。

■ DepthStencilState
What : 奥行き（Z）とステンシル（型抜き）処理を制御するステート。

Why : 重なり順やマスク描画をコントロールする。

When : PSO適用時。

Where : PSOに含まれる。

Who : 開発者。

How : D3D12_DEPTH_STENCIL_DESC に定義。

🍳 料理の例え：
　盛り付けの順序制御＋特定形状の型にだけ盛るルール（ハート形のケーキ型など）。

■ InputLayout
What : 頂点バッファ内のデータ構造を定義する。

Why : GPUに「何がどの順で入っているか」を伝えるため。

When : PSO作成時に指定。

Where : PSOに記録される。

Who : 開発者。

How : D3D12_INPUT_LAYOUT_DESC を使う。

🍳 料理の例え：
　お弁当の仕切り。ごはん、たまご、ウィンナー、の順番を守って配置する。

■ DepthFunc
What : 奥行き比較時の条件（例：小さい値のみ描画など）。

Why : 前にあるものを優先的に描画するため。

When : Zバッファ更新時。

Where : DepthStencilState に設定。

Who : 開発者。

How : LESS, EQUAL, GREATER など。

🍳 料理の例え：
　盛り付けルール「手前の料理が目立つように」「背が高い料理は奥」など。

■ VertexShader
What : 頂点ごとに実行されるプログラム。位置や色の変換を行う。

Why : モデルをスクリーン座標へ変換するため。

When : 各頂点処理時。

Where : GPUで実行。

Who : シェーダーコードとして開発者が記述。

How : HLSLで書き、コンパイルして使う。

🍳 料理の例え：
　切る前の食材を「どの大きさ・どの形」にするか調整する下ごしらえ工程。

■ PixelShader
What : ピクセル単位で実行される色決定プログラム。

Why : 表示色・ライティング・影の処理などを行うため。

When : 画面に出力される全ピクセルで。

Where : GPUで実行。

Who : 開発者が HLSL で書く。

How : HLSL → DXCでコンパイル → PSOに登録。

🍳 料理の例え：
　最後の味付け。ソースをかけたり焼き色を付けたりする仕上げ工程。

■ TextureCoordinate（UV）
What : テクスチャ画像のどの部分を使うかを示す座標（U:横, V:縦）。

Why : 画像の任意部分をモデル表面に貼るため。

When : 頂点に設定され、補間されてピクセルに渡る。

Where : 頂点バッファ → シェーダー。

Who : モデルデータ制作者 or 開発者。

How : 頂点属性として指定し、シェーダーで受け取る。

🍳 料理の例え：
　ピザの中から「このトッピングだけ選んで使う」みたいな感じ。表面の使う場所を指定。

■ SwapChain
What : 描画結果を表示する画面（ウィンドウ）に渡す仕組み。

Why : GPUの描画をディスプレイに映すため。

When : 毎フレーム描画後に画面更新時。

Where : GPUとディスプレイの間。

Who : 開発者がセットアップ。

How : DXGIを使い生成し、Present()で表示。

🍳 料理の例え：
　完成した料理をお客さんに出すためのお皿。できた料理をテーブルに置く瞬間。

■ DoubleBuffering
What : 表示用バッファを2つ用意し、片方を描画、もう片方を表示する方式。

Why : 画面のちらつき防止と滑らかな表示。

When : 毎フレーム繰り返し。

Where : GPUメモリ内。

Who : システム／開発者設定。

How : SwapChainに2つのバッファを持たせる。

🍳 料理の例え：
　料理を盛る皿が2枚あり、一方は盛り付け中、もう一方はお客さんに出している感じ。

■ Log
What : 実行時の情報・エラーを記録する仕組み。

Why : バグの発見や動作確認のため。

When : 任意のタイミング。

Where : ファイルやコンソール。

Who : 開発者。

How : ログ関数やライブラリを使う。

🍳 料理の例え：
　調理日誌。何をいつ作ったか、失敗したことをメモするノート。

■ ImGui
What : 即席でUIを作るためのライブラリ。

Why : デバッグやツールを簡単に作るため。

When : 開発中やテスト時。

Where : ゲームやツールの画面内。

Who : 開発者。

How : ランタイムでUIコードを書き、GPUに描画。

🍳 料理の例え：
　すぐ使えるメニュー表。好きな料理を素早く追加・削除できる。

■ PIX
What : DirectX用のGPUデバッグ・プロファイリングツール。

Why : 描画のボトルネックを見つけるため。

When : 開発中・最適化時。

Where : Windows環境。

Who : 開発者が使う。

How : キャプチャ・解析・GPU時間測定。

🍳 料理の例え：
　キッチンタイマー＋監督者。どの工程で時間かかってるかチェック。

■ HLSL
What : GPU用のシェーダープログラミング言語。

Why : 頂点やピクセル処理を記述するため。

When : シェーダーを作る時。

Where : ソースコードとして書かれ、DXCでコンパイルされる。

Who : 開発者。

How : C言語に似た構文で記述。

🍳 料理の例え：
　料理レシピ。どう切って、どう焼いて、どう盛り付けるかの手順書。

■ register
What : HLSLでシェーダーリソースを指定する場所番号。

Why : GPUがリソースを区別するため。

When : HLSLコードで。

Where : シェーダー内の変数宣言。

Who : シェーダー開発者。

How : register(t0), register(b0) などで指定。

🍳 料理の例え：
　調理道具の棚番号。どの棚に何があるか指定して素早く取り出す。

■ Sampler
What : テクスチャをどのように補間（拡大縮小）するかの設定。

Why : 画像の滑らかさや繰り返し方法を制御。

When : シェーダーでテクスチャを読むとき。

Where : シェーダーとパイプライン設定。

Who : 開発者。

How : HLSLで設定し、RootSignatureに登録。

🍳 料理の例え：
　スパイスのまぶし方。粗くまぶすか細かく混ぜるかの違い。

■ Texel
What : テクスチャの画素（ピクセル単位の最小単位）。

Why : 画像情報の基本単位。

When : テクスチャ読み込み・処理時。

Where : テクスチャ画像内。

Who : GPUが扱う。

How : テクスチャの各座標に対応。

🍳 料理の例え：
　サラダの一片ずつの野菜。細かい素材の一単位。

■ Sampling
What : テクスチャから色を取り出す操作。

Why : モデル表面に正しい色を表示するため。

When : ピクセルシェーダーで頻繁に実行。

Where : GPU内部。

Who : シェーダー実行時。

How : UV座標に従いフィルタリングで色を決定。

🍳 料理の例え：
　サラダから好みの野菜を取り分ける作業。大きさや形に応じて取る。

■ Dxc (DirectX Shader Compiler)
What : HLSLシェーダーをDXILなどにコンパイルするツール。

Why : GPUが理解できるバイナリに変換するため。

When : ビルド時や実行時に。

Where : Windows環境の開発ツール。

Who : 開発者が使う。

How : コマンドラインやAPI経由で呼び出し。

🍳 料理の例え：
　生の食材を調理可能な状態に下処理（洗って切る）する行程。

■ Viewport
What : 描画対象の画面内の範囲（矩形）。

Why : 画面の一部に絵を描きたいときに使う。

When : 描画時に設定。

Where : コマンドリストに設定。

Who : 開発者。

How : RSSetViewports() で指定。

🍳 料理の例え：
　皿の上で使う「おかずを乗せる範囲」。大皿の一角にだけ盛り付ける感じ。

■ Scissor
What : 描画を制限する矩形領域。

Why : 特定範囲だけ描画したいときに。

When : 描画時。

Where : コマンドリストに設定。

Who : 開発者。

How : RSSetScissorRects() で指定。

🍳 料理の例え：
　料理の盛り付けで「この部分だけにソースをかける」という範囲指定。

■ Material
What : オブジェクトの見た目を決めるパラメータ群（色・テクスチャ・反射率など）。

Why : モデルの質感表現のため。

When : 描画時にシェーダーへ渡す。

Where : CPUメモリ・GPUバッファ。

Who : 開発者・アーティスト。

How : 定数バッファやテクスチャで管理。

🍳 料理の例え：
　料理の味付けセット（塩・胡椒・ソースなど）全体のレシピ。

■ Transform
What : 位置・回転・拡縮を表す行列やデータ。

Why : モデルを動かす・配置するため。

When : 描画前に計算・更新。

Where : CPUかGPUで管理。

Who : 開発者。

How : 行列計算で表現。

🍳 料理の例え：
　料理の盛り付け位置や形の調整。盛る場所や形を決める。

■ Scene
What : 描画・更新対象のオブジェクト群や空間情報の集合。

Why : ゲーム世界を管理・表現するため。

When : フレーム毎に描画・更新。

Where : CPUメモリ中心。

Who : ゲームエンジン・開発者。

How : 階層構造やリストで管理。

🍳 料理の例え：
　料理の盛り付けが複数皿に分かれている宴会全体のセット。